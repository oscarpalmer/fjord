// Generated by CoffeeScript 1.4.0
(function() {
  var Fjord, cache, loc, oldie, yay;

  loc = window.location.protocol + '//' + window.location.host + '/';

  yay = !!window.history && !!window.history.pushState && !!window.history.replaceState;

  cache = [];

  oldie = window.location.href;

  Fjord = {
    cache: function(url, window, document) {
      var item;
      if (this.cached(url)) {
        item = this.find(url);
        item.x = window.pageXOffset;
        return item.y = window.pageYOffset;
      } else {
        item = {
          body: document.body.innerHTML,
          title: document.title,
          url: url,
          x: 0,
          y: 0
        };
        return cache.push(item);
      }
    },
    cached: function(url) {
      var item, _i, _len;
      for (_i = 0, _len = cache.length; _i < _len; _i++) {
        item = cache[_i];
        if (item.url === url) {
          return true;
        }
      }
      return false;
    },
    find: function(url) {
      var item, _i, _len;
      for (_i = 0, _len = cache.length; _i < _len; _i++) {
        item = cache[_i];
        if (item.url === url) {
          return item;
        }
      }
    },
    render: function(item, type) {
      document.body.innerHTML = item.body;
      document.title = item.title;
      oldie = item.url;
      if (type === 'pop') {
        window.scrollTo(item.x, item.y);
      }
      if (type === 'push') {
        window.history.pushState({
          path: item.url
        }, '', item.url);
      }
      return this.trigger('fjord:ready');
    },
    request: function() {
      try {
        return new XMLHttpRequest();
      } catch (error) {
        try {
          return new ActiveXObject('Msxml2.XMLHTTP');
        } catch (error) {
          try {
            return new ActiveXObject('Msxml2.XMLHTTP.6.0');
          } catch (error) {
            return new ActiveXObject('Msxml2.XMLHTTP.3.0');
          }
        }
      }
    },
    trigger: function(name) {
      var event;
      event = document.createEvent('Events');
      event.initEvent(name, true, true);
      return document.dispatchEvent(event);
    },
    visit: function(url, type) {
      var item, link, xhr;
      link = type === 'pop' ? oldie : window.location.href;
      this.trigger('fjord:load');
      this.cache(link, window, document);
      if (this.cached(url)) {
        item = this.find(url);
        return this.render(item, type);
      } else {
        xhr = this.request();
        xhr.onload = function() {
          var clean, html, title;
          clean = xhr.responseText.replace(/\s+/g, ' ').replace(/\t+/g, '');
          html = clean.replace(/^(.*)<body>(.*)<\/body>(.*)$/, '$2');
          title = clean.replace(/^(.*)<title>(.*)<\/title>(.*)$/, '$2');
          item = {
            body: html,
            title: title,
            url: url,
            x: 0,
            y: 0
          };
          return Fjord.render(item, type);
        };
        xhr.open('get', url, true);
        return xhr.send(null);
      }
    }
  };

  if (yay) {
    window.onload = function() {
      return history.replaceState({
        path: window.location.href
      }, '');
    };
    window.onpopstate = function(event) {
      var state;
      state = event.state;
      if ((state != null ? state.path : void 0) != null) {
        return Fjord.visit(state.path, 'pop');
      }
    };
    window.onclick = function(event) {
      var target;
      target = event.target;
      if (target.tagName === 'A' && target.href.indexOf(loc) === 0) {
        event.preventDefault();
        if (target.href !== window.location.href) {
          return Fjord.visit(target.href, 'push');
        }
      }
    };
  }

}).call(this);
